<?xml version="1.0" ?>
<config>
	<property>
		<name>master</name>
		<description>The ip and port of the master server, e.g., 192.168.0.1:4710. If no port is specified, the default port 4710 is used.</description>
		<value></value>
	</property>
	<property>
		<name>slaves</name>
		<description>The comma separated list of ips and ports of the different slaves, e.g., 192.168.0.2:4712,192.168.0.3,192.168.0.4:4777. If no port is specified, the default port 4710 is used.</description>
		<value></value>
	</property>
	<property>
		<name>clientConnection</name>
		<description>The ip and port to which clients can connect, e.g., 192.168.0.1:4711. If no port is specified, the default port 4711 is used.</description>
		<value></value>
	</property>
	<property>
		<name>clientConnectionTimeout</name>
		<description>The number of milliseconds the master waits for messages from the client before closing the connection. Every 3000 milliseconds the client sends a keep alive message to the master. The default value is 10000 milliseconds.</description>
		<value>10000</value>
	</property>
	<property>
		<name>logLevel</name>
		<description>Sets the logging level to one of: OFF, SEVERE, WARNING, INFO, CONFIG, FINE, FINER, FINEST, ALL</description>
		<value>INFO</value>
	</property>
	<property>
		<name>loggingDirectory</name>
		<description>Defines an existing directory in which the log files are written.</description>
		<value>.</value>
	</property>
	<property>
		<name>tmpDir</name>
		<description>Defines the directory where intermediate data is stored. Default directory (i.e., if not set) is the temporary directory of the operating system.</description>
		<value>/tmp</value>
	</property>
	<property>
		<name>dictionaryStorageType</name>
		<description>Defines how the dictionary is persisted:
MEMORY = dictionary is only stored in memory
MEMORY_MAPPED_FILE = dictionary is stored as a file located in dictionaryDir which is mapped to memory. In Linux no additional caching is required.
RANDOM_ACCESS_FILE = dictionary is stored as a file located in dictionaryDir. Each dictionary lookup will result in a file access.</description>
		<value>MEMORY_MAPPED_FILE</value>
	</property>
	<property>
		<name>dictionaryDataStructure</name>
		<description>Defines the data structure used for storing the dictionary:
HASH_TREE_MAP = fast single thread access, slow concurrent access, memory efficient
B_TREE_MAP = slower single thread access, faster concurrent access, costs more memory</description>
		<value>HASH_TREE_MAP</value>
	</property>
	<property>
		<name>dictionaryDir</name>
		<description>Defines a non-existing directory where the dictionary is stored.</description>
		<value>./dictionary</value>
	</property>
	<property>
		<name>enableAsynchronousWritesForDictionary</name>
		<description>If set to true, updates are written in a separate thread asynchronously.</description>
		<value>true</value>
	</property>
	<property>
		<name>dictionaryCacheType</name>
		<description>Defines how the instance cache works:
NONE = no instances are cached
HASH_TABLE = a cached instance is deleted, if a hash collision occurs
LEAST_RECENTLY_USED = the least recently used instance is deleted, if the cache reaches its maximum size
HARD_REFERENCE = no instance is removed from the cache automatically
SOFT_REFERENCE = instances are removed from the cache by the garbage collector, if no hard reference exists on them and the memory is full
WEAK_REFERENCE = instances are removed from the cache by the garbage collector, as soon as no hard reference exists on them</description>
		<value>HASH_TABLE</value>
	</property>
	<property>
		<name>statisticsStorageType</name>
		<description>Defines how the statistics tables are persisted:
MEMORY = tables are only stored in memory
MEMORY_MAPPED_FILE = tables are stored as a file located in dictionaryDir which is mapped to memory. In Linux no additional caching is required.
RANDOM_ACCESS_FILE = tables are is stored as a file located in dictionaryDir. Each dictionary lookup will result in a file access.</description>
		<value>MEMORY_MAPPED_FILE</value>
	</property>
	<property>
		<name>statisticsDataStructure</name>
		<description>Defines the data structure used for storing the statiscts tables:
HASH_TREE_MAP = fast single thread access, slow concurrent access, memory efficient
B_TREE_MAP = slower single thread access, faster concurrent access, costs more memory</description>
		<value>HASH_TREE_MAP</value>
	</property>
	<property>
		<name>statisticsDir</name>
		<description>Defines a non-existing directory where the statistics are stored.</description>
		<value>./statistics</value>
	</property>
	<property>
		<name>enableAsynchronousWritesForStatistics</name>
		<description>If set to true, updates are written in a separate thread asynchronously.</description>
		<value>true</value>
	</property>
	<property>
		<name>statisticsCacheType</name>
		<description>Defines how the instance cache works:
NONE = no instances are cached
HASH_TABLE = a cached instance is deleted, if a hash collision occurs
LEAST_RECENTLY_USED = the least recently used instance is deleted, if the cache reaches its maximum size
HARD_REFERENCE = no instance is removed from the cache automatically
SOFT_REFERENCE = instances are removed from the cache by the garbage collector, if no hard reference exists on them and the memory is full
WEAK_REFERENCE = instances are removed from the cache by the garbage collector, as soon as no hard reference exists on them</description>
		<value>HASH_TABLE</value>
	</property>
	<property>
		<name>tripleStoreStorageType</name>
		<description>Defines how the triple store is persisted:
MEMORY = triples are only stored in memory
MEMORY_MAPPED_FILE = triples are stored as a file located in dictionaryDir which is mapped to memory. In Linux no additional caching is required.
RANDOM_ACCESS_FILE = triples are is stored as a file located in dictionaryDir. Each dictionary lookup will result in a file access.</description>
		<value>MEMORY_MAPPED_FILE</value>
	</property>
	<property>
		<name>tripleStoreDir</name>
		<description>Defines a non-existing directory where the triples are stored.</description>
		<value>./tripleStore</value>
	</property>
	<property>
		<name>enableAsynchronousWritesForTripleStore</name>
		<description>If set to true, updates are written in a separate thread asynchronously.</description>
		<value>true</value>
	</property>
	<property>
		<name>tripleStoreCacheType</name>
		<description>Defines how the instance cache works:
NONE = no instances are cached
HASH_TABLE = a cached instance is deleted, if a hash collision occurs
LEAST_RECENTLY_USED = the least recently used instance is deleted, if the cache reaches its maximum size
HARD_REFERENCE = no instance is removed from the cache automatically
SOFT_REFERENCE = instances are removed from the cache by the garbage collector, if no hard reference exists on them and the memory is full
WEAK_REFERENCE = instances are removed from the cache by the garbage collector, as soon as no hard reference exists on them</description>
		<value>HASH_TABLE</value>
	</property>
	<property>
		<name>sizeOfMappingRecycleCache</name>
		<description>In order to prevent a frequent garbage collection, Mapping objects are recycled. This option defines how many Mapping objects should be cached for reuse.</description>
		<value>100000</value>
	</property>
	<property>
		<name>unbalanceThresholdForWorkerThreads</name>
		<description>This property defines how much the current workloads of the different WorkerThreads may differ, before the work is rebalanced.</description>
		<value>0.1</value>
	</property>
	<property>
		<name>mappingBundleSize</name>
		<description>Before mappings are sent to another computer, they are bundled into one message. This number defines how many mappings are bundeled.</description>
		<value>100</value>
	</property>
</config>